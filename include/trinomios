#if !defined(TRINOMIOS)
#define TRINOMIOS

/** @brief Multiplica 2 trinomios de la forma ax² + bx + c
 * @param a1 Representa a₁x²
 * @param b1 Representa b₁x
 * @param c1 Representa c₁
 * @param a2 Representa a₂x²
 * @param b2 Representa b₂x
 * @param c2 Representa c₂
 * @param array Es un apuntador a un arreglo donde se almacenará el resultado
 * @returns (a₁x² + b₁x + c₁) * (a₂x² + b₂x + c₂) en un arreglo compuesto como [a1 * b2, a1 * b2 + b1 * a2, a1 * c2 + b1 * b2 + c1 * a2, b1 * c2 + c1 * b2, c1 * c2]
 */
void ProductoTrinomios(int a1, int b1, int c1, int a2, int b2, int c2, int array[]);

/** @brief Divide un trinomios de la forma ax² + bx + c entre un binomio de la forma ax² + c
 * @param a1 Representa a₁x²
 * @param b1 Representa b₁x
 * @param c1 Representa c₁
 * @param a2 Representa a₂x²
 * @param b2 Representa c₂
 * @param array Es un apuntador a un arreglo donde se almacenará el resultado*
 * @returns (a₁x² + b₁x + c₁) / (a₂x² + c₂) en un arreglo compuesto como [a1 / a2, (b1 - (b2 * array[0])) / a2 )] en caso de que sea divisible y [0, 0] en caso de no ser divisible
 */
void DivisionTrinomioEntreBinomio(int a1, int b1, int c1, int a2, int c2, int array[]);

/** @brief Suma 2 trinomios de la forma ax² + bx + c
 * @param a1 Representa a₁x²
 * @param b1 Representa b₁x
 * @param c1 Representa c₁
 * @param a2 Representa a₂x²
 * @param b2 Representa b₂x
 * @param c2 Representa c₂
 * @param array Es un apuntador a un arreglo donde se almacenará el resultado
 * @returns (a₁x² + b₁x + c₁) + (a₂x² + b₂x + c₂) en un arreglo compuesto como [a1 + a2, b1 + b2, c1 + c2]
 */
void SumaTrinomios(int a1, int b1, int c1, int a2, int b2, int c2, int array[]);

/** @brief Resta 2 trinomios de la forma ax² + bx + c
 * @param a1 Representa a₁x²
 * @param b1 Representa b₁x
 * @param c1 Representa c₁
 * @param a2 Representa a₂x²
 * @param b2 Representa b₂x
 * @param c2 Representa c₂
* @param array Es un apuntador a un arreglo donde se almacenará el resultado
 * @returns (a₁x² + b₁x + c₁) - (a₂x² + b₂x + c₂) en un arreglo compuesto como [a1 - a2, b1 - b2, c1 - c2]
 */
void RestaTrinomios(int a1, int b1, int c1, int a2, int b2, int c2, int array[]);

/** @brief Completa un trinomio de la forma ax² + bx + z a ax² + bx + c
 * @param a Representa ax²
 * @param b Representa bx
 * @param c Representa z
 * @param array Es un apuntador a un arreglo donde se almacenará el resultado
 * @returns ax² + bx + c en un arreglo compuesto como [a, b, c]
 */
void CompletarTrinomio(int a, int b, int c, int array[]);

#endif